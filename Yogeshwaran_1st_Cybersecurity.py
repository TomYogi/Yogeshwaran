{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyM7T9ij4DhvaXe7Xbuk+0xF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/TomYogi/Yogeshwaran/blob/master/Yogeshwaran_1st_Cybersecurity.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question: 5"
      ],
      "metadata": {
        "id": "1ET6sI3gWt3_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def household():\n",
        "  print(\"\\nCalculating household Eb price\")\n",
        "  unit=int(input(\"\\nNumber of Units used: \"))\n",
        "\n",
        "  if unit<101:\n",
        "    price=unit*0.50\n",
        "    print(\"Your Price : Rs.\",price)\n",
        "  elif unit>100 and unit<201:\n",
        "    price=unit*0.75\n",
        "    print(\"Your Price : Rs.\",price)\n",
        "  elif unit>200 and unit<301:\n",
        "    price=unit*1.20\n",
        "    print(\"Your Price : Rs.\",price)\n",
        "  else:\n",
        "    price=unit*1.50\n",
        "    print(\"Your Price : Rs.\",price)\n",
        "\n",
        "household()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Acle881pWv9d",
        "outputId": "78ede9fd-1a03-49c4-f32b-9cf81707f719"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Calculating household Eb price\n",
            "\n",
            "Number of Units used: 1500\n",
            "Your Price : Rs. 2250.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question: 2"
      ],
      "metadata": {
        "id": "57xSF_RLcLOI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cost=int(input(\"\\nOriginal amount : \"))\n",
        "gst=int(input(\"\\nGST percentage : \"))\n",
        "\n",
        "gst_amount=cost*gst/100\n",
        "total_amount=cost+gst_amount\n",
        "print(\"\\nGST amount: \",gst_amount)\n",
        "print(\"\\nTotal amount: \",total_amount)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        },
        "id": "5qOkin6BcSzP",
        "outputId": "8ba3dadb-6c74-4d8c-aa07-a8c69093dc9a"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-47-20a75d7628f6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcost\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nOriginal amount : \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mgst\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nGST percentage : \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mgst_amount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcost\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mgst\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mtotal_amount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcost\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mgst_amount\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    861\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    862\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 863\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    864\u001b[0m         )\n\u001b[1;32m    865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    902\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    903\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 904\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    905\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    906\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question:1-1"
      ],
      "metadata": {
        "id": "hwez2EGSekWM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\"\"I am signing up for Replit's 100 days of Python challenge! I will make sure to spend\n",
        "some time every day coding along, for a minimum of 10 minutes a day. I'll be using\n",
        "Replit, an amazing online IDE so I can do this from my phone wherever I happend to be.\n",
        "No excuses for not coding from the middle of a field!\"\"\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rk86M6POemw3",
        "outputId": "3818d016-7bb8-4a32-da2c-c1b8c128c635"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I am signing up for Replit's 100 days of Python challenge! I will make sure to spend\n",
            "some time every day coding along, for a minimum of 10 minutes a day. I'll be using\n",
            "Replit, an amazing online IDE so I can do this from my phone wherever I happend to be.\n",
            "No excuses for not coding from the middle of a field!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question:1-2"
      ],
      "metadata": {
        "id": "aylGI9ldfrfI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "malware={'adwar':'tracks user activity',\n",
        "        'Botnet':'infected and commanded by the attacker',\n",
        "        'keylogger':'A keylogger can monitor a great deal of user activity, including email, browsing activity, program ',\n",
        "        'spyware':'A little like adware'}\n",
        "print(malware)\n",
        "print(len(malware))\n",
        "print(type(malware))\n",
        "malware['trojon']='trojon is a malware it attack unexpeted time'\n",
        "print(malware)\n",
        "malware.update({'adwar': 'virus'})\n",
        "print(malware)\n",
        "malware.pop('spyware')\n",
        "print(malware)\n",
        "malware.clear()\n",
        "print(malware)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_3KETZdaftX0",
        "outputId": "1021d284-d568-476a-928b-e4d2a8d9f066"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'adwar': 'tracks user activity', 'Botnet': 'infected and commanded by the attacker', 'keylogger': 'A keylogger can monitor a great deal of user activity, including email, browsing activity, program ', 'spyware': 'A little like adware'}\n",
            "4\n",
            "<class 'dict'>\n",
            "{'adwar': 'tracks user activity', 'Botnet': 'infected and commanded by the attacker', 'keylogger': 'A keylogger can monitor a great deal of user activity, including email, browsing activity, program ', 'spyware': 'A little like adware', 'trojon': 'trojon is a malware it attack unexpeted time'}\n",
            "{'adwar': 'virus', 'Botnet': 'infected and commanded by the attacker', 'keylogger': 'A keylogger can monitor a great deal of user activity, including email, browsing activity, program ', 'spyware': 'A little like adware', 'trojon': 'trojon is a malware it attack unexpeted time'}\n",
            "{'adwar': 'virus', 'Botnet': 'infected and commanded by the attacker', 'keylogger': 'A keylogger can monitor a great deal of user activity, including email, browsing activity, program ', 'trojon': 'trojon is a malware it attack unexpeted time'}\n",
            "{}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question:4"
      ],
      "metadata": {
        "id": "kAQ6b-vZf40d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "student_data=pd.DataFrame(\n",
        "    {\"Student_Name\": [\"Rajesh\", \"Vishnu\", \"Yogeshpandian\", \"Kottai\", \"Yogeshwaran\", \"Gulfum\", \"Boobathy\", \"Goodson\", \"Periyasamy\", \"Murali\"],\n",
        "     \"Age\": [20,20,20,20,20,20,20,20,20,20],\n",
        "     \"DOB(year)\": [2001,2001,2001,2001,2001,2001,2001,2001,2001,2001],\n",
        "     \"Weight(kg)\" : [60,62,75,80,49,67,83,66,73,72],\n",
        "     \"Height(cm)\" : [150,120,135,177,156,188,199,154,177,133]}\n",
        ")\n",
        "\n",
        "student_data[\"BMI\"]=student_data[\"Weight(kg)\"]/student_data[\"Height(cm)\"]*student_data[\"Height(cm)\"]\n",
        "\n",
        "student_data[\"Status\"]=student_data[\"BMI\"].apply(lambda x: \"Normal\" if x>50 and x<80 else \"Underweight\")\n",
        "# print(student_data)\n",
        "\n",
        "\n",
        "student_data.to_csv(\"student_data.csv\")\n",
        "student_data=pd.read_csv(\"/content/student_data.csv\")\n",
        "student_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "-R3AIGy4gCup",
        "outputId": "926f4bd4-5643-47c3-d474-e8ddbf9d7274"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0   Student_Name  Age  DOB(year)  Weight(kg)  Height(cm)   BMI  \\\n",
              "0           0         Rajesh   20       2001          60         150  60.0   \n",
              "1           1         Vishnu   20       2001          62         120  62.0   \n",
              "2           2  Yogeshpandian   20       2001          75         135  75.0   \n",
              "3           3         Kottai   20       2001          80         177  80.0   \n",
              "4           4    Yogeshwaran   20       2001          49         156  49.0   \n",
              "5           5         Gulfum   20       2001          67         188  67.0   \n",
              "6           6       Boobathy   20       2001          83         199  83.0   \n",
              "7           7        Goodson   20       2001          66         154  66.0   \n",
              "8           8     Periyasamy   20       2001          73         177  73.0   \n",
              "9           9         Murali   20       2001          72         133  72.0   \n",
              "\n",
              "        Status  \n",
              "0       Normal  \n",
              "1       Normal  \n",
              "2       Normal  \n",
              "3  Underweight  \n",
              "4  Underweight  \n",
              "5       Normal  \n",
              "6  Underweight  \n",
              "7       Normal  \n",
              "8       Normal  \n",
              "9       Normal  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e2c2af9-97ce-49f2-91fa-121ebf956a2f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Student_Name</th>\n",
              "      <th>Age</th>\n",
              "      <th>DOB(year)</th>\n",
              "      <th>Weight(kg)</th>\n",
              "      <th>Height(cm)</th>\n",
              "      <th>BMI</th>\n",
              "      <th>Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Rajesh</td>\n",
              "      <td>20</td>\n",
              "      <td>2001</td>\n",
              "      <td>60</td>\n",
              "      <td>150</td>\n",
              "      <td>60.0</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Vishnu</td>\n",
              "      <td>20</td>\n",
              "      <td>2001</td>\n",
              "      <td>62</td>\n",
              "      <td>120</td>\n",
              "      <td>62.0</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Yogeshpandian</td>\n",
              "      <td>20</td>\n",
              "      <td>2001</td>\n",
              "      <td>75</td>\n",
              "      <td>135</td>\n",
              "      <td>75.0</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Kottai</td>\n",
              "      <td>20</td>\n",
              "      <td>2001</td>\n",
              "      <td>80</td>\n",
              "      <td>177</td>\n",
              "      <td>80.0</td>\n",
              "      <td>Underweight</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Yogeshwaran</td>\n",
              "      <td>20</td>\n",
              "      <td>2001</td>\n",
              "      <td>49</td>\n",
              "      <td>156</td>\n",
              "      <td>49.0</td>\n",
              "      <td>Underweight</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>Gulfum</td>\n",
              "      <td>20</td>\n",
              "      <td>2001</td>\n",
              "      <td>67</td>\n",
              "      <td>188</td>\n",
              "      <td>67.0</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>Boobathy</td>\n",
              "      <td>20</td>\n",
              "      <td>2001</td>\n",
              "      <td>83</td>\n",
              "      <td>199</td>\n",
              "      <td>83.0</td>\n",
              "      <td>Underweight</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7</td>\n",
              "      <td>Goodson</td>\n",
              "      <td>20</td>\n",
              "      <td>2001</td>\n",
              "      <td>66</td>\n",
              "      <td>154</td>\n",
              "      <td>66.0</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8</td>\n",
              "      <td>Periyasamy</td>\n",
              "      <td>20</td>\n",
              "      <td>2001</td>\n",
              "      <td>73</td>\n",
              "      <td>177</td>\n",
              "      <td>73.0</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>9</td>\n",
              "      <td>Murali</td>\n",
              "      <td>20</td>\n",
              "      <td>2001</td>\n",
              "      <td>72</td>\n",
              "      <td>133</td>\n",
              "      <td>72.0</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e2c2af9-97ce-49f2-91fa-121ebf956a2f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8e2c2af9-97ce-49f2-91fa-121ebf956a2f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8e2c2af9-97ce-49f2-91fa-121ebf956a2f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question: 3"
      ],
      "metadata": {
        "id": "Gb6vME-unQHX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "crime=pd.DataFrame(\n",
        "    {\"Offense\": [\"Sending threatning messages by email\", \"Sending Defarmatory messages by email\", \"Forgery of electronic records\", \"Bogus websites,Cyber frauds\", \"Email Spoofing\", \"Web-Jacking\", \"E-Mail Abuse\", \"Online sale drugs\", \"Online sale of arms\"],\n",
        "     \"IP Section(law)\": [503,499,463,420,463,383,500,1985,1959],\n",
        "     \"Penalty(Rs)\": [15000,15000,100000,20000,15000,30000,25000,200000,500000],\n",
        "     \"Crime in Popular apps\" : [\"Gmail,Outlook\",\"Gmail,Outlook\",\"OLX,Flipkart,Amazon\",\"Gpay,Phonepe\", \"Gmail,Outlook\", \"Facebook,Instagram\", \"Gmail,Outlook\",\"OLX,Facebook,Instagram\",\"Flipkart,Amazon,Shop101\"]}\n",
        ")\n",
        "\n",
        "\n",
        "crime"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        },
        "id": "IeaC8RV_nTOn",
        "outputId": "142a4b4d-022b-4e11-9a6b-4563ecbe8bee"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 Offense  IP Section(law)  Penalty(Rs)  \\\n",
              "0   Sending threatning messages by email              503        15000   \n",
              "1  Sending Defarmatory messages by email              499        15000   \n",
              "2          Forgery of electronic records              463       100000   \n",
              "3            Bogus websites,Cyber frauds              420        20000   \n",
              "4                         Email Spoofing              463        15000   \n",
              "5                            Web-Jacking              383        30000   \n",
              "6                           E-Mail Abuse              500        25000   \n",
              "7                      Online sale drugs             1985       200000   \n",
              "8                    Online sale of arms             1959       500000   \n",
              "\n",
              "     Crime in Popular apps  \n",
              "0            Gmail,Outlook  \n",
              "1            Gmail,Outlook  \n",
              "2      OLX,Flipkart,Amazon  \n",
              "3             Gpay,Phonepe  \n",
              "4            Gmail,Outlook  \n",
              "5       Facebook,Instagram  \n",
              "6            Gmail,Outlook  \n",
              "7   OLX,Facebook,Instagram  \n",
              "8  Flipkart,Amazon,Shop101  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68b970ec-a7ef-4127-a33c-774c31ca0cac\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Offense</th>\n",
              "      <th>IP Section(law)</th>\n",
              "      <th>Penalty(Rs)</th>\n",
              "      <th>Crime in Popular apps</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Sending threatning messages by email</td>\n",
              "      <td>503</td>\n",
              "      <td>15000</td>\n",
              "      <td>Gmail,Outlook</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Sending Defarmatory messages by email</td>\n",
              "      <td>499</td>\n",
              "      <td>15000</td>\n",
              "      <td>Gmail,Outlook</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Forgery of electronic records</td>\n",
              "      <td>463</td>\n",
              "      <td>100000</td>\n",
              "      <td>OLX,Flipkart,Amazon</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Bogus websites,Cyber frauds</td>\n",
              "      <td>420</td>\n",
              "      <td>20000</td>\n",
              "      <td>Gpay,Phonepe</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Email Spoofing</td>\n",
              "      <td>463</td>\n",
              "      <td>15000</td>\n",
              "      <td>Gmail,Outlook</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Web-Jacking</td>\n",
              "      <td>383</td>\n",
              "      <td>30000</td>\n",
              "      <td>Facebook,Instagram</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>E-Mail Abuse</td>\n",
              "      <td>500</td>\n",
              "      <td>25000</td>\n",
              "      <td>Gmail,Outlook</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Online sale drugs</td>\n",
              "      <td>1985</td>\n",
              "      <td>200000</td>\n",
              "      <td>OLX,Facebook,Instagram</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Online sale of arms</td>\n",
              "      <td>1959</td>\n",
              "      <td>500000</td>\n",
              "      <td>Flipkart,Amazon,Shop101</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68b970ec-a7ef-4127-a33c-774c31ca0cac')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-68b970ec-a7ef-4127-a33c-774c31ca0cac button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-68b970ec-a7ef-4127-a33c-774c31ca0cac');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    }
  ]
}